<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd 
	http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<description>Spring-web MVC配置</description>
	 
	<!-- 处理对静态资源的请求 -->	
	<!-- 属性mapping使用Ant风格的通配符，表明路径必须以/resources开始，而且也包括它的任意子路径；
			属性location表明了要提供服务的文件位置。
	 -->
	<mvc:resources mapping="/resources/**" 
								  location="/resources/"/>

	<!-- Spring MVC 注解驱动 （@RequestMapping）-->
	<mvc:annotation-driven/> <!-- 注册多个特性，包括JSR-303支持，以及DefaultAnnotationHandlerMapping -->
 	<!-- 能够将REST URL解析为请求映射的是DefaultAnnotationHandlerMapping这个类，它在启动时，
			对Controller中所有标注了@RequestMapping注解的方法，都放到了一个HandlerMapping对象中，
			当有请求时，就在这个对象中进行查找是否有与之匹配路径的处理方法，有则执行，没有就会输出一个
			Not Page Found警告信息。 -->
	
	<!-- 这两个类用来启动基于Spring MVC的注解功能，将控制器与方法映射加入到容器中 -->
	<!-- 
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
 	-->
 	
 	<!-- 扫描@Controller等@Component -->
 	<context:component-scan base-package="cn.oss.ssm3.spitter.mvc"></context:component-scan>
 		
	<!-- 使用Tiles第一步：注册TilesViewResolver -->
	<bean class="org.springframework.web.servlet.view.tiles2.TilesViewResolver"/>
	<!-- 使用Tiles第二步：TilesViewResolver本身并不了解Tiles定义的任何事情，而是依靠
			TilesConfigurer来记录这个信息 -->
	<bean class=
			"org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/views/**/views.xml</value>
			</list>
		</property>
	</bean>		
	
	<!-- 当请求应用程序首页时，将执行/hello请求，还可以设定成redirect -->
	<!-- 	
		<mvc:view-controller path="/" view-name="forward:/hello" />
	 -->
 

	
</beans>